usethis::use_r("utils")           # code
usethis::use_tidy_style()         # code style
formatR::tidy_dir("R")            #   can modify code https://yihui.org/formatr/
install.packages("formatR")
install.packages("lintr")
formatR::tidy_dir("R")            #   can modify code https://yihui.org/formatr/
lintr::lint_package()             #   point out only but in detail
usethis::use_mit_license()        # LICENCE
usethis::use_rcpp()               # RCPP
devtools::document()              # document
devtools::document()              # document
usethis::use_pipe()               # pipe
usethis::use_data()               # external data
library(devtools)
devtools::install_github("matutosi/automater")
devtools::install_github("matutosi/automater")
file.path(find.package("automater"), "inst/pdf/")
devtools::install_github("matutosi/automater")
file.path(find.package("automater"), "inst/pdf/")
devtools::load_all(".")
?pdf_overlay
pdf_overlay_session_num(input, session = "b")
input <- file.path(find.package("automater"), "pdf/00_sn_a.pdf")
pdf_overlay_session_num(input, session = "b")
install.packages("tesseract")
install.packages("abbyyR")
install.packages("image.binarization")
install.packages("googleCloudVisionR")
library(magick)
library(image.binarization)
img <- image_read("scan.jpg")
install.packages("magic")
library(magick)
library(image.binarization)
img <- image_read("scan.jpg")
getwd()
find.package("magic")
library(magick)
library(image.binarization)
img <- image_read("scan.jpg")
library(magick)
library(image.binarization)
img <- image_read("scan.jpg")
file.path(find.package("image.binarization"), "extdata", "doxa-example.png")
img <- image_read(file.path(find.package("image.binarization"), "extdata", "doxa-example.png"))
img
img <- image_binarization(img, type = "su")
img
img <- image_read("d:/a.png")
img <- image_convert(img, format = "PGM", colorspace = "Gray")
img
img <- image_binarization(img, type = "su")
img
img <- image_read("d:/a.png")
img <- image_convert(img, format = "PGM", colorspace = "Gray")
img
img <- image_binarization(img, type = "su")
img
curl::curl_download
curl::curl_download("https://raw.githubusercontent.com/DIGI-VUB/image.binarization/master/tools/example.png", "d:/a.png")
img <- image_read("d:/a.png")
img <- image_convert(img, format = "PGM", colorspace = "Gray")
img
img <- image_binarization(img, type = "su")
img
Sys.setenv("GCV_AUTH_FILE" = "/fullpath/to/auth.json")
library(googleCloudVisionR)
Sys.setenv()
Sys.setenv("GCV_AUTH_FILE")
setwd("d:/")
Sys.setenv("GCV_AUTH_FILE" = "d:/a.json")
library(googleCloudVisionR)
imagePath <- system.file(
"extdata", "golden_retriever_puppies.jpg", package = "googleCloudVisionR"
)
gcv_get_image_annotations(
imagePaths = imagePath,
feature = "LABEL_DETECTION",
maxNumResults = 7
)
library(googleCloudVisionR)
find.package("a")
?find.package("a")
path.package("base")
find.package("base")
find.package("moranajp")
path.package("moranajp")
library(moranajp)
library(magick)
library(magick)
find.package("magick")
path.package("magick")
a <- find.package("magick")
a
a <- find.package("aa")
a
remove.packages("automater")
library("automater")
library(automater)
remove.packages("devtools")
remove.packages("xlsx")
